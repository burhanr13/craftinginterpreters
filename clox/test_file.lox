#!./clox



println("===== Test basics =============");

println("Hello World");

var a = 6;
println(a*6);
var b = 6000;

// aaaaaaaa
// comment

println("======= Test Scope ================");

{
    var a = 5;
    var c = 2;
    println(a);
    println(c);
    var d = 888;
    {
        var a = 3;
        println(a);
        println(b);
        var c = 2;
        println(c);
        println(d);
    }
    println(a);
    println(b);
    println(c);
    println(d);
}
println(a);
println(b);

var a = 1;
{
    var a = 2 + a;
    println(a);
}

println("============ Test control flow ============");

println("------- Test fizz buzz and string concatenation -----------");
var s = "";
var i = 0;
while (i < 40) {
    if (i % 3 == 0 and i % 5 == 0) {
        println("FizzBuzz");
    } else if (i % 3 == 0) {
        println("Fizz");
    } else if (i % 5 == 0) {
        println("Buzz");
    } else {
        println(i);
    }
    i = i + 1;
    if (i % 2 == 0) {
        s = s + "/";
    }
    if (i % 2 == 1) {
        s = s + "\\";
    }
}

println(s);

println("------------ Test loops and math ----------------");
for (var i = 0; i < 50; i = i + 1) { // another comment
    println(i);
    if (i * 2 >= 54) {
        println((5*i/2));
    }
}

println("--------- Test loops without body ------------");

var d=0;
while((d+=1) < 10);
println(d);

println("------------ Test fibonacci with loops ------------");

var a = 0;
var temp;

for (var b = 1; a < 500; b = temp + b) {
    println(a);
    temp = a;
    a = b;
}

println("======== Test break/continue ============");

var i=1;
while (true) {
    if (i%3==0) {
        i = i+4;
        continue;
    }
    println(i);
    for(var j=i;j>=0;j=j-1) {
        if(j%3==0) {
            j = j/ 3;
            continue;
        }
        println(j);
    }
    if(i>100) break;
    i = i+1;
}

println("========= Test switch case ============");

for(var i=0;i<15;i=i+1) {
    switch(i) {
        case 1:
            println("one");
        case 2:
        case 3:
            println("small number");
            break;
        case 4:
            println("four");
            break;
        case 5:
            println("five");
            break;
        case 6:
            println("six");
            break;
        case 10:
            println("ten");
            break;
        default:
            println("something else");
    }
}


println("========= Test functions ============");

fun aaaa() {
    println(1);
    var a =49;
    for(var i=0;i<10;i=i+1) println("aaaaaaaaaa");
    var p = 0;
    while(true) {
        p = p+1;
        if (p==100) break;
        if (p<99) continue;
        println(p);
    }
    println(a);
    
    return a;
}
println(aaaa());

fun printStuff() {
    var x=false;
    return x;
    for(var i=0;i<10;i=i+1){
        println("a");
    }
    return x;
}
println(printStuff());

println("--------- Test args ---------");


var s = "";

fun doit(a, b) {
    s = s+ " "+(a*a*a*b*b*b);
}

for (var i=0;i<10;i=i+1) {
    doit(i,i+1);
}
println(s);

println("---------- Test recursion ----------");

fun count(n) {
    if (n > 1) count(n - 1);
    println(n);
}

count(3);

println("--------- Test fibonacci with recursion ------------");

fun fib(n) {
    if (n <= 1) return n;
    return fib(n - 2) + fib(n - 1);
}

for (var i = 0; i < 20; i = i + 1) {
    println(fib(i));
}



println("------ Test nested functions -------");

fun outer(a) {
    fun inner(b) {
        return b*b;
    }
    return inner(a);
}



println(outer(33));

println("-------- Test higher order and lambda -----------");

fun thrice(fn) {
    for (var i = 1; i <= 3; i = i + 1) {
        fn(i);
    }
}

thrice(fun (a) {
    println(a);
});

fun rep(fn, n, a) -> n == 0 ? a : rep(fn, n-1, fn(a));

fun reploop(fn,n,a) {
    for(var i=0;i<n;i=i+1) {
        a = fn(a);
    }
    return a;
}

var n = 0;
println(rep(fun(a)->a+1,10,n));
println(reploop(fun(n)->n*2,10,n+1));
println(n);


println("======== Test builtins =========");

var start = clock();

for(var i=0;i<10;i=i+1) {
    for(var j=0;j<10;j=j+1) {
        doit(i,j);
    }
}

var end = clock();

println(end - start);


println("========== Test closures ============");

fun outer(a) {
    var i=0;
    fun closure() -> i = i + a;
    for(var j=0;j<10;j=j+1) closure();
    return i;
}

println(outer(10));

println("----------- Test closing upvalues -------------");

fun makeCounter() {
    var i = 0;
    fun count() {
        i = i + 1;
        println(i);
    }

    return count;
}


var counter = makeCounter();
counter();
counter();

println("----------- Test currying ------------");

fun add(a) {
    fun add2(b) {
        return a+b;
    }
    return add2;
}

println(add(1)(2));

var add = fun (a) {return fun (b) {return a+b;};};
println(add(1234)(5555));

var coolAdd = fun (a) -> fun (b) -> a + b;
println(coolAdd (1234) (1234));

var add3 = fun (a) -> fun (b) -> fun (c) -> a + b + c;
var plus1 = add3 (1);
var plus2 = plus1 (1);
println(plus2(1));
println(add3(1)(2)(3));

println("----------- Test closure objects ----------");

fun closurePoint(x,y) {
    var x = x;
    var y = y;
    return fun(m) {
        switch(m) {
            case "getX":
                return fun()->x;
            case "getY":
                return fun()->y;
            case "add":
                return fun(p) -> closurePoint(x+p("getX")(),y+p("getY")());
        }
    };
}

fun cPointString(p) -> "" + '(' + p("getX")() + ',' + p("getY")() + ')';

var p1 = closurePoint(1,2);
println("p1: "+cPointString(p1));
var p2 = closurePoint(3,4);
println("p2: "+cPointString(p2));
println("p1+p2: "+cPointString(p1("add")(p2)));


/*

class Point {
    init(x,y) {
        this.x = x;
        this.y = y;
    }

    toString() {
        return "[" + this.x + "," + this.y + "]";
    }
}

var p = Point(2,3);
println(p.init(4,6));
println(p.toString());

var clos = p.toString;

println(clos());

class A {
    a() {
        println("a");
    }
}

A().a();

class Cake {
    taste() {
        var adjective = "delicious";
        println("The " + this.flavor + " cake is " + adjective + "!");
    }
}

var cake = Cake();
cake.flavor = "German chocolate";
cake.taste(); // Prints "The German chocolate cake is delicious!".

class Thing {
    getCallback() {
        fun localFunction() {
            println(this);
        }

        return localFunction;
    }
}

var callback = Thing().getCallback();
callback();


class Tree {
    init(v) {
        this.v = v;
        this.l = nil;
        this.r = nil;
    }

    insert(v) {
        if(v > this.v) {
            if(this.r == nil) {
                this.r = Tree(v);
            }else{
                this.r.insert(v);
            }
        }else if(v < this.v) {
            if(this.l == nil) {
                this.l = Tree(v);
            }else{
                this.l.insert(v);
            }
        }
    }

    toString() {
        return "(" + this.v +" "+ (this.l==nil?"nil":this.l.toString())
                            +" "+ (this.r==nil?"nil":this.r.toString())
                            + ")";                                   
    }
}

fun floor(a) {
    return a - a%1;
}

fun randint(a,b) {
    return floor(random() * (b-a) + a);
}

var tree = Tree(randint(0,100));
for(var i=0;i<10;i=i+1) {
    tree.insert(randint(0,100));
}

println(tree.toString());

class TreeNode {
    init(l,x,r) {
        this.l = l;
        this.x = x;
        this.r = r;
    }
}

var tree_insert = fun (tree) -> fun (x) -> 
    (tree == nil) ? TreeNode(nil,x,nil) :
    (x < tree.x) ? TreeNode(tree_insert (tree.l) (x), tree.x, tree.r) :
    (x > tree.x) ? TreeNode(tree.l, tree.x, tree_insert (tree.r) (x)) :
    tree;

var tree_to_string = fun (tree) -> 
    (tree == nil) ? "nil" :
    "(" + tree.x + " " + tree_to_string (tree.l)
                 + " " + tree_to_string (tree.r)
                 + ")";

var tree2 = nil;

var rep = fun (n) -> fun (f) -> (n <= 0) ? fun (x) -> x :
    fun (x) -> rep (n-1) (f) (f (x));

println(rep (10) (fun (x) -> x + 2) (20));

tree2 = rep (10) (fun (tree) -> tree_insert (tree) (randint(0,100))) (tree2);

println(tree_to_string (tree2));



class Math {
  class square(n) {
    return n * n;
  }
}

println(Math.square(3)); // Prints "9".
*/ // closing comment